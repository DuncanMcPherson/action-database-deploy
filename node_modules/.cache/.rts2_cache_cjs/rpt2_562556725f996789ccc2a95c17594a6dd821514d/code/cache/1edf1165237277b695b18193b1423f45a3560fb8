{"code":"// noinspection ExceptionCaughtLocallyJS\nimport { endGroup, getInput, setFailed, startGroup } from \"@actions/core\";\nimport { context } from \"@actions/github\";\nimport { existsSync } from \"fs\";\nimport { createGacFile } from \"./createGACFile\";\nimport { deployRules } from \"./deploy\";\nconst projectId = getInput('projectId');\nconst googleCredentials = getInput(\"firebaseServiceAccount\", {\n    required: true\n});\nconst firebaseToolsVersion = getInput('firebaseToolsVersion');\nconst entryPoint = getInput('entryPoint');\nasync function run() {\n    const isPullRequest = !!context.payload.pull_request;\n    if (isPullRequest) {\n        throw Error(\"This action should only be used on the master branch after a pull request has been completed\");\n    }\n    let finish = (details) => console.log(details);\n    try {\n        startGroup(\"Verifying that firebase.json exists\");\n        if (entryPoint !== '.') {\n            console.log(`Attempting to change directory to: ${entryPoint}`);\n            try {\n                process.chdir(entryPoint);\n            }\n            catch (err) {\n                throw Error(`Error changing to directory: ${entryPoint}: ${err}`);\n            }\n        }\n        if (existsSync('./firebase.json')) {\n            console.log('firebase.json found. Continuing deploy');\n        }\n        else {\n            throw Error(\"firebase.json not found. If your firebase.json file is not in the root of your directory, edit the entryPoint option of this action.\");\n        }\n        endGroup();\n        startGroup(\"Setting up credentials\");\n        const gacFileName = await createGacFile(googleCredentials);\n        console.log(\"Created a temp file with Default Google Credentials\");\n        endGroup();\n        startGroup(\"Deploying rules\");\n        const deployment = await deployRules(gacFileName, {\n            projectId,\n            firebaseToolsVersion\n        });\n        if (deployment.status === 'error') {\n            throw Error(deployment.error);\n        }\n        endGroup();\n        finish({\n            conclusion: 'Success'\n        });\n    }\n    catch (err) {\n        setFailed(err.message);\n        finish({\n            conclusion: 'Failure',\n            output: {\n                title: \"Deploy of rules failed\",\n                summary: `Error: ${err.message}`\n            }\n        });\n    }\n}\n// noinspection JSIgnoredPromiseFromCall\nrun();\n","references":["C:/Users/dmcph/WebstormProjects/action-database-deploy/node_modules/@actions/core/lib/core.d.ts","C:/Users/dmcph/WebstormProjects/action-database-deploy/node_modules/@actions/github/lib/github.d.ts","C:/Users/dmcph/WebstormProjects/action-database-deploy/src/createGACFile.ts","C:/Users/dmcph/WebstormProjects/action-database-deploy/src/deploy.ts"],"dts":{"name":"C:/Users/dmcph/WebstormProjects/action-database-deploy/bin/index.d.ts","writeByteOrderMark":false,"text":"export {};\n"}}
